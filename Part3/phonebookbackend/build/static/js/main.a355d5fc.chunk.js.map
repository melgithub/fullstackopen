{"version":3,"sources":["Components/Filter.js","Components/PersonForm.js","Components/Person.js","Components/Entries.js","Services/persons.js","Components/Notification.js","App.js","index.js"],"names":["Filter","value","onChange","PersonForm","onSubmit","name","number","handleNameEvent","handleNumberEvent","Person","buttonAction","id","key","onClick","list","map","person","baseURL","axios","get","newObject","post","put","delete","params","Notification","message","msgType","className","App","useState","persons","setPersons","newName","setNewName","newPhoneNumber","setNewPhoneNumber","showAll","setShowAll","filter","setFilter","confirmationMessage","setConfirmationMessage","messageType","setMessageType","useEffect","personService","then","response","data","catch","error","peopleToShow","toLowerCase","search","event","target","preventDefault","find","window","confirm","changedPerson","concat","setTimeout","console","log","Entries","ReactDOM","render","document","getElementById"],"mappings":"uOAeeA,EAVA,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SACpB,OACA,gDACoB,2BACdD,MAAOA,EACPC,SAAUA,MCgBLC,EArBI,SAAC,GAAkE,IAAjEC,EAAgE,EAAhEA,SAAUC,EAAsD,EAAtDA,KAAMC,EAAgD,EAAhDA,OAAQC,EAAwC,EAAxCA,gBAAiBC,EAAuB,EAAvBA,kBAC1D,OACA,0BAAMJ,SAAUA,GACZ,sCACM,2BACFH,MAAOI,EACPH,SAAUK,KAEd,uCACO,2BACHN,MAAOK,EACPJ,SAAUM,KAGd,6BACI,0CCPGC,EATA,SAAC,GAAwC,IAAtCJ,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,OAAQI,EAAuB,EAAvBA,aAAcC,EAAS,EAATA,GAC1C,OACI,wBAAIC,IAAKD,GACJN,EADL,MACcC,EACV,4BAAQO,QAAS,kBAAMH,EAAaC,EAAIN,KAAxC,YCHG,kBAAGS,EAAH,EAAGA,KAAMJ,EAAT,EAASA,aAAT,OACfI,EAAKC,KAAI,SAAAC,GAAM,OACX,kBAAC,EAAD,CACIJ,IAAKI,EAAOL,GACZN,KAAMW,EAAOX,KACbC,OAAQU,EAAOV,OACfK,GAAIK,EAAOL,GACXD,aAAcA,Q,gBCXhBO,EAAU,eAmBD,EAjBA,WACX,OAAOC,IAAMC,IAAIF,IAgBN,EAbA,SAAAG,GACX,OAAOF,IAAMG,KAAKJ,EAASG,IAYhB,EATA,SAACT,EAAIS,GAEhB,OAAOF,IAAMI,IAAN,UAAaL,EAAb,YAAwBN,GAAMS,IAO1B,EAJM,SAACT,GAClB,OAAOO,IAAMK,OAAN,UAAgBN,EAAhB,YAA2BN,GAAM,CAAEa,OAAQ,CAACb,SCJxCc,EAXM,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,QAC5B,OAAgB,OAAZD,EACO,KAGP,yBAAKE,UAAWD,GACXD,I,8NCDb,IAiJeG,EAjJH,WAAM,MAEeC,mBAAS,IAFxB,mBAERC,EAFQ,KAECC,EAFD,OAGgBF,mBAAS,IAHzB,mBAGRG,EAHQ,KAGCC,EAHD,OAI8BJ,mBAAS,IAJvC,mBAIRK,EAJQ,KAIQC,EAJR,OAKeN,oBAAS,GALxB,mBAKRO,EALQ,KAKCC,EALD,OAMaR,mBAAS,IANtB,mBAMRS,EANQ,KAMAC,EANA,OAOsCV,mBAAS,MAP/C,mBAOTW,EAPS,KAOYC,EAPZ,OAQwBZ,mBAAS,IARjC,mBAQRa,EARQ,KAQKC,EARL,KAWhBC,qBAAU,WACRC,IAEGC,MAAK,SAAAC,GACJhB,EAAWgB,EAASC,SAEvBC,OAAM,SAAAC,GACLP,EAAe,SACfF,EAAuB,8BAExB,IAGH,IAAMU,EAAef,EACnBN,EACAA,EAAQQ,QAAO,SAAAvB,GAAM,OAAkD,IAA9CA,EAAOX,KAAKgD,cAAcC,OAAOf,MA0F5D,OACE,6BACE,+CACA,kBAAC,EAAD,CACEtC,MAAOsC,EACPrC,SAXoB,SAACqD,GACzBf,EAAUe,EAAMC,OAAOvD,MAAMoD,eAC7Bf,GAAW,MAWT,+CACA,kBAAC,EAAD,CACElC,SAhGY,SAACmD,GAGjB,GAFAA,EAAME,iBAEF1B,EAAQ2B,MAAK,SAAA1C,GAAM,OAAIA,EAAOX,OAAS4B,MAGzC,GADc0B,OAAOC,QAAP,UAAkB3B,EAAlB,kEACF,CACV,IAAMjB,EAASe,EAAQ2B,MAAK,SAAA1C,GAAM,OAAIA,EAAOX,OAAS4B,KAChD4B,E,yVAAa,IAAQ7C,EAAR,CAAgBV,OAAQ6B,IAE3CW,EACQ9B,EAAOL,GAAIkD,GAClBd,MAAK,SAAAC,GACJhB,EAAWD,EAAQQ,QAAO,SAAAvB,GAAM,OAAIA,EAAOX,OAAS4B,KAAS6B,OAAOd,EAASC,OAC7EL,EAAe,WACfF,EAAuB,WAAD,OAAYT,EAAZ,cACtB8B,YAAW,WACXrB,EAAuB,QACpB,QAEJQ,OAAM,SAAAC,GACLP,EAAe,SACfF,EAAuB,GAAD,OAAIT,EAAJ,wDAU1Ba,EAJqB,CACnBzC,KAAM4B,EACN3B,OAAQ6B,IAIPY,MAAK,SAAAC,GACJhB,EAAWD,EAAQ+B,OAAOd,EAASC,OACnCL,EAAe,WACfF,EAAuB,WAAD,OAAYT,EAAZ,YACtB8B,YAAW,WACXrB,EAAuB,QACpB,QAEJQ,OAAM,SAAAC,GACLa,QAAQC,IAAId,EAAMH,SAASC,MAC3BL,EAAe,SACfF,EAAuB,uBAG7BR,EAAW,IACXE,EAAkB,KAgDd/B,KAAM4B,EACN3B,OAAQ6B,EACR5B,gBA1BuB,SAACgD,GAC5BS,QAAQC,IAAIV,EAAMC,OAAOvD,OACzBiC,EAAWqB,EAAMC,OAAOvD,QAyBpBO,kBAvB4B,SAAC+C,GACjCS,QAAQC,IAAIV,EAAMC,OAAOvD,OACzBmC,EAAkBmB,EAAMC,OAAOvD,UAuB7B,kBAAC,EAAD,CACEyB,QAASe,EACTd,QAASgB,IAEX,uCACA,4BACE,kBAACuB,EAAD,CACEpD,KAAMsC,EACN1C,aA1Da,SAACC,EAAIN,GACLsD,OAAOC,QAAP,6BAAqCvD,EAArC,OAEjByC,EACcnC,GACboC,KACCf,EAAWD,EAAQQ,QAAO,SAAAvB,GAAM,OAAIA,EAAOL,KAAOA,MAClDiC,EAAe,WACfF,EAAuB,GAAD,OAAIrC,EAAJ,8BACtB0D,YAAW,WACTrB,EAAuB,QACtB,MAEJQ,OAAM,SAAAC,GACLP,EAAe,SACfF,EAAuB,GAAD,OAAIrC,EAAJ,wDClG9B8D,IAASC,OAAO,kBAAC,EAAD,MACZC,SAASC,eAAe,W","file":"static/js/main.a355d5fc.chunk.js","sourcesContent":["\r\nimport React from 'react'\r\n\r\n// Responsible for input field that manages the name filtering system\r\n\r\nconst Filter = ({value, onChange}) => {\r\n    return (\r\n    <div>\r\n        Filter by name: <input\r\n          value={value}\r\n          onChange={onChange}/>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Filter\r\n","\r\nimport React from 'react'\r\n\r\n// Responsible for displaying the name and phone number form, inputs and submit button\r\n\r\nconst PersonForm = ({onSubmit, name, number, handleNameEvent, handleNumberEvent}) => {\r\n    return (\r\n    <form onSubmit={onSubmit}> \r\n        <div>\r\n        Name: <input\r\n            value={name}\r\n            onChange={handleNameEvent}/>\r\n        </div>\r\n        <div>\r\n        Phone: <input\r\n            value={number}\r\n            onChange={handleNumberEvent}/>\r\n        </div>\r\n\r\n        <div>\r\n            <button>Add</button>\r\n        </div>\r\n   </form>\r\n    )\r\n}\r\n\r\nexport default PersonForm\r\n","import React from 'react'\r\n\r\n// Responsible for display of an individual person; used in the Entries component.\r\n\r\nconst Person = ({ name, number, buttonAction, id }) => {\r\n    return (\r\n        <li key={id}>\r\n            {name} - {number} \r\n            <button onClick={() => buttonAction(id, name)}>Delete</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Person","import React from 'react'\r\nimport Person from './Person'\r\n\r\n// Responsible for mapping our array of people to the Person component\r\n\r\nexport default ({ list, buttonAction }) => \r\nlist.map(person => (\r\n    <Person\r\n        key={person.id}\r\n        name={person.name}\r\n        number={person.number}\r\n        id={person.id}\r\n        buttonAction={buttonAction}\r\n        />\r\n))","import axios from 'axios'\r\nconst baseURL = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    return axios.get(baseURL)\r\n}\r\n\r\nconst create = newObject => {\r\n    return axios.post(baseURL, newObject)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    // FYI - backticks used for when you want to interpolate an expression within your string.\r\n    return axios.put(`${baseURL}/${id}`, newObject)\r\n}\r\n\r\nconst handleDelete = (id) => {\r\n    return axios.delete(`${baseURL}/${id}`, { params: {id}} )\r\n}\r\n\r\nexport default {getAll, create, update, handleDelete}","import React from 'react'\r\n\r\nconst Notification = ({message, msgType}) => {\r\n    if (message === null){\r\n        return null\r\n    }\r\n    return (\r\n        <div className={msgType}>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\r\nimport Filter from './Components/Filter'\r\nimport PersonForm from './Components/PersonForm'\r\nimport Entries from './Components/Entries'\r\nimport personService from './Services/persons' \r\nimport Notification from './Components/Notification'\r\n\r\nconst App = () => {\r\n  // States\r\n  const [ persons, setPersons] = useState([])  // array, starts empty\r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newPhoneNumber, setNewPhoneNumber ] = useState('')\r\n  const [ showAll, setShowAll] = useState(true) // true by default\r\n  const [ filter, setFilter] = useState('') // contents of our filter\r\n  const [confirmationMessage, setConfirmationMessage] = useState(null) // text to appear\r\n  const [ messageType, setMessageType ] = useState('') // msg type - success or error?\r\n\r\n  // Fetching persons from server\r\n  useEffect(() => {\r\n    personService\r\n      .getAll()\r\n      .then(response => {\r\n        setPersons(response.data)\r\n    }) \r\n    .catch(error => {\r\n      setMessageType('error')\r\n      setConfirmationMessage('Failed fetching data.')\r\n    })\r\n  }, [])\r\n\r\n  // List generated based on state\r\n  const peopleToShow = showAll\r\n  ? persons\r\n  : persons.filter(person => person.name.toLowerCase().search(filter) !== -1)\r\n\r\n  // Event handlers\r\n  const addPerson = (event) => {\r\n    event.preventDefault() // Stops page from refreshing when submitting\r\n    \r\n    if (persons.find(person => person.name === newName))\r\n    {\r\n      let confirm = window.confirm(`${newName} already exists. Would you like to update their phone number?`);\r\n      if (confirm){\r\n        const person = persons.find(person => person.name === newName)\r\n        const changedPerson = { ...person, number: newPhoneNumber}\r\n        \r\n        personService\r\n        .update(person.id, changedPerson) // Updating backend\r\n        .then(response => {  // Rendering to page\r\n          setPersons(persons.filter(person => person.name !== newName).concat(response.data))\r\n          setMessageType('success')\r\n          setConfirmationMessage(`Contact ${newName} updated.`)\r\n          setTimeout(() => {\r\n          setConfirmationMessage(null)\r\n          }, 5000);\r\n        })\r\n        .catch(error => {\r\n          setMessageType('error')\r\n          setConfirmationMessage(`${newName} has already been deleted from the server.`)\r\n        })\r\n      }\r\n    }\r\n    else \r\n    {\r\n      const personObject = { // Create new person object\r\n        name: newName,\r\n        number: newPhoneNumber,\r\n      }\r\n      personService\r\n        .create(personObject)\r\n        .then(response => {\r\n          setPersons(persons.concat(response.data))\r\n          setMessageType('success')\r\n          setConfirmationMessage(`Contact ${newName} added.`)\r\n          setTimeout(() => {\r\n          setConfirmationMessage(null)\r\n          }, 5000);\r\n        })\r\n        .catch(error => {\r\n          console.log(error.response.data)\r\n          setMessageType('error')\r\n          setConfirmationMessage('Entry not valid.')\r\n        })\r\n    }\r\n    setNewName('') \r\n    setNewPhoneNumber('') \r\n  }\r\n\r\n  const deletePerson = (id, name) => {\r\n    let confirmation = window.confirm(`Permanently delete ${name}?`);\r\n    if (confirmation){\r\n      personService\r\n      .handleDelete(id)\r\n      .then(\r\n        setPersons(persons.filter(person => person.id !== id)),\r\n        setMessageType('success'),\r\n        setConfirmationMessage(`${name} deleted from the server.`),\r\n        setTimeout(() => {\r\n          setConfirmationMessage(null)\r\n        }, 5000)\r\n      )\r\n      .catch(error => {\r\n        setMessageType('error')\r\n        setConfirmationMessage(`${name} has already been deleted from the server.`)\r\n      })\r\n    }\r\n  }\r\n\r\n  // Updates setNewName, setPhoneNumber and setFilter as user types into forms\r\n  const handleNewPersonEvent = (event) => {\r\n    console.log(event.target.value)\r\n    setNewName(event.target.value)\r\n  }\r\n  const handleNewPhoneNumberEvent = (event) => {\r\n    console.log(event.target.value)\r\n    setNewPhoneNumber(event.target.value)\r\n  }\r\n  const handleFilterEvent = (event) => {\r\n    setFilter(event.target.value.toLowerCase()) // converts to lowercase for easier checking\r\n    setShowAll(false) // we only want to see filtered results\r\n  }\r\n\r\n  // What the app renders - Components are imported as other .js files.\r\n  return (\r\n    <div>\r\n      <h2>React Phonebook</h2>\r\n      <Filter\r\n        value={filter}\r\n        onChange={handleFilterEvent}/>\r\n\r\n      <h3>Add new contact</h3>\r\n      <PersonForm\r\n        onSubmit={addPerson}\r\n        name={newName}\r\n        number={newPhoneNumber}\r\n        handleNameEvent={handleNewPersonEvent}\r\n        handleNumberEvent={handleNewPhoneNumberEvent}/>\r\n\r\n      <Notification\r\n        message={confirmationMessage}\r\n        msgType={messageType}/>\r\n\r\n      <h3>Numbers</h3>\r\n      <ul>\r\n        <Entries\r\n          list={peopleToShow}\r\n          buttonAction={deletePerson}/>\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />,\r\n    document.getElementById('root'));"],"sourceRoot":""}